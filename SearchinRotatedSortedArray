public class Solution {
    // Time: O(lgn)
    public int search(int[] A, int target) {
        int l = A.length;
        int left = 0, right = l-1, mid;
        
        while (right >= left) {
            mid = (left + right) / 2;
            if (A[mid] == target) return mid;
            
            if (A[mid] < A[right])  // right half is sorted
                if (target > A[mid] && target <= A[right])
                    left = mid + 1;
                else 
                    right = mid - 1;
            else  // left half is sorted
                if (target >= A[left] && target < A[mid])
                    right = mid - 1;
                else 
                    left = mid + 1;
        }
        return -1;
    }
    
    // worst case -> O(n); average should be O(lgn)
    public boolean searchII(int[] A, int target) {
        int l = A.length;
        int left = 0, right = l-1, mid;
        
        while (left <= right) {
            mid = (left + right) / 2;
            if (A[mid] == target) return true;
            
            if (A[mid] < A[right] || A[mid] < A[left])
                if (target > A[mid] && target <= A[right])
                    left = mid + 1;
                else 
                    right = mid - 1;
            else if (A[mid] > A[right] || A[mid] > A[left])
                if (target >= A[left] && target < A[mid])
                    right = mid - 1;
                else 
                    left = mid + 1;
            else {
                left ++;
                right --;
            }
        }
        return false;
    }
}
